Implementation of TLS-SSL in Docker Compose

cd /etc/kafka/secrets/

1) Generate CA Certificate
openssl req -new -x509 -keyout ca-key.pem -out ca-cert.pem -days 365 -subj "/C=IN/ST=Karnataka/L=Uttarahalli/O=Platformatory/OU=Streaming/CN=Platformatory-CA"

2) Generate Client-1 Keystore and Truststore
keytool -keystore client-1.keystore.jks -alias kafka-1 -validity 365 -genkey -keyalg RSA -dname "CN=kafka-1, OU=Streaming, O=Platformatory, L=Uttarahalli, ST=Karnataka, C=IN"
keytool -keystore client-1.keystore.jks -alias kafka-1 -certreq -file client-1-cert-file
openssl x509 -req -CA ca-cert.pem -CAkey ca-key.pem -in client-1-cert-file -out client-1-cert-signed.pem -days 365 -CAcreateserial
keytool -keystore client-1.keystore.jks -alias CARoot -import -file ca-cert.pem
keytool -keystore client-1.keystore.jks -alias kafka-1 -import -file client-1-cert-signed.pem
openssl verify -CAfile ca-cert.pem client-1-cert-signed.pem
#client-cert-signed.pem: OK
keytool -importcert -file ca-cert.pem -alias CARoot -keystore client-1.truststore.jks

3) Generate Kafka-1 Keystore and Truststore
keytool -keystore kafka-1.keystore.jks -alias kafka-1 -validity 365 -genkey -keyalg RSA -dname "CN=kafka-1, OU=Streaming, O=Platformatory, L=Uttarahalli, ST=Karnataka, C=IN"
keytool -keystore kafka-1.keystore.jks -alias kafka-1 -certreq -file kafka-1-cert-file
openssl x509 -req -CA ca-cert.pem -CAkey ca-key.pem -in kafka-1-cert-file -out kafka-1-cert-signed.pem -days 365 -CAcreateserial
keytool -keystore kafka-1.keystore.jks -alias CARoot -import -file ca-cert.pem
keytool -keystore kafka-1.keystore.jks -alias kafka-1 -import -file kafka-1-cert-signed.pem
openssl verify -CAfile ca-cert.pem kafka-1-cert-signed.pem
#kafka-1-cert-signed.pem: OK
keytool -importcert -file ca-cert.pem -alias CARoot -keystore kafka-1.truststore.jks

4) Generate Client-2 Keystore and Truststore
keytool -keystore client-2.keystore.jks -alias kafka-2 -validity 365 -genkey -keyalg RSA -dname "CN=kafka-2, OU=Streaming, O=Platformatory, L=Uttarahalli, ST=Karnataka, C=IN"
keytool -keystore client-2.keystore.jks -alias kafka-2 -certreq -file client-2-cert-file
openssl x509 -req -CA ca-cert.pem -CAkey ca-key.pem -in client-2-cert-file -out client-2-cert-signed.pem -days 365 -CAcreateserial
keytool -keystore client-2.keystore.jks -alias CARoot -import -file ca-cert.pem
keytool -keystore client-2.keystore.jks -alias kafka-2 -import -file client-2-cert-signed.pem
openssl verify -CAfile ca-cert.pem client-2-cert-signed.pem
#client-cert-signed.pem: OK
keytool -importcert -file ca-cert.pem -alias CARoot -keystore client-2.truststore.jks

5) Generate Kafka-2 Keystore and Truststore
keytool -keystore kafka-2.keystore.jks -alias kafka-2 -validity 365 -genkey -keyalg RSA -dname "CN=kafka-2, OU=Streaming, O=Platformatory, L=Uttarahalli, ST=Karnataka, C=IN"
keytool -keystore kafka-2.keystore.jks -alias kafka-2 -certreq -file kafka-2-cert-file
openssl x509 -req -CA ca-cert.pem -CAkey ca-key.pem -in kafka-2-cert-file -out kafka-2-cert-signed.pem -days 365 -CAcreateserial
keytool -keystore kafka-2.keystore.jks -alias CARoot -import -file ca-cert.pem
keytool -keystore kafka-2.keystore.jks -alias kafka-2 -import -file kafka-2-cert-signed.pem
openssl verify -CAfile ca-cert.pem kafka-2-cert-signed.pem
#kafka-2-cert-signed.pem: OK
keytool -importcert -file ca-cert.pem -alias CARoot -keystore kafka-2.truststore.jks

6) Generate Client-3 Keystore and Truststore
keytool -keystore client-3.keystore.jks -alias kafka-3 -validity 365 -genkey -keyalg RSA -dname "CN=kafka-3, OU=Streaming, O=Platformatory, L=Uttarahalli, ST=Karnataka, C=IN"
keytool -keystore client-3.keystore.jks -alias kafka-3 -certreq -file client-3-cert-file
openssl x509 -req -CA ca-cert.pem -CAkey ca-key.pem -in client-3-cert-file -out client-3-cert-signed.pem -days 365 -CAcreateserial
keytool -keystore client-3.keystore.jks -alias CARoot -import -file ca-cert.pem
keytool -keystore client-3.keystore.jks -alias kafka-3 -import -file client-3-cert-signed.pem
openssl verify -CAfile ca-cert.pem client-3-cert-signed.pem
#client-cert-signed.pem: OK
keytool -importcert -file ca-cert.pem -alias CARoot -keystore client-3.truststore.jks

7) Generate Kafka-3 Keystore and Truststore
keytool -keystore kafka-3.keystore.jks -alias kafka-3 -validity 365 -genkey -keyalg RSA -dname "CN=kafka-3, OU=Streaming, O=Platformatory, L=Uttarahalli, ST=Karnataka, C=IN"
keytool -keystore kafka-3.keystore.jks -alias kafka-3 -certreq -file kafka-3-cert-file
openssl x509 -req -CA ca-cert.pem -CAkey ca-key.pem -in kafka-3-cert-file -out kafka-3-cert-signed.pem -days 365 -CAcreateserial
keytool -keystore kafka-3.keystore.jks -alias CARoot -import -file ca-cert.pem
keytool -keystore kafka-3.keystore.jks -alias kafka-3 -import -file kafka-3-cert-signed.pem
openssl verify -CAfile ca-cert.pem kafka-3-cert-signed.pem
#kafka-3-cert-signed.pem: OK
keytool -importcert -file ca-cert.pem -alias CARoot -keystore kafka-3.truststore.jks

7) Create Credentials
echo "certificate" > ./keystore-password.txt
echo "certificate" > ./key-password.txt
echo "certificate" > ./truststore-password.txt

cd /etc/kafka/configs

8) Create Client-1 SSL Properties
echo "security.protocol=SSL" >> client-1-ssl.properties
echo "ssl.truststore.location=/etc/kafka/secrets/client-1.truststore.jks" >> client-1-ssl.properties
echo "ssl.truststore.password=certificate" >> client-1-ssl.properties
echo "ssl.keystore.location=/etc/kafka/secrets/client-1.keystore.jks" >> client-1-ssl.properties
echo "ssl.keystore.password=certificate" >> client-1-ssl.properties
echo "ssl.key.password=certificate" >> client-1-ssl.properties
echo "ssl.enabled.protocols=TLSv1.2,TLSv1.3" >> client-1-ssl.properties
echo "ssl.client.auth=required" >> client-1-ssl.properties

9) Create Client-2 SSL Properties
echo "security.protocol=SSL" >> client-2-ssl.properties
echo "ssl.truststore.location=/etc/kafka/secrets/client-2.truststore.jks" >> client-2-ssl.properties
echo "ssl.truststore.password=certificate" >> client-2-ssl.properties
echo "ssl.keystore.location=/etc/kafka/secrets/client-2.keystore.jks" >> client-2-ssl.properties
echo "ssl.keystore.password=certificate" >> client-2-ssl.properties
echo "ssl.key.password=certificate" >> client-2-ssl.properties
echo "ssl.enabled.protocols=TLSv1.2,TLSv1.3" >> client-2-ssl.properties
echo "ssl.client.auth=required" >> client-2-ssl.properties

10) Create Client-3 SSL Properties
echo "security.protocol=SSL" >> client-3-ssl.properties
echo "ssl.truststore.location=/etc/kafka/secrets/client-3.truststore.jks" >> client-3-ssl.properties
echo "ssl.truststore.password=certificate" >> client-3-ssl.properties
echo "ssl.keystore.location=/etc/kafka/secrets/client-3.keystore.jks" >> client-3-ssl.properties
echo "ssl.keystore.password=certificate" >> client-3-ssl.properties
echo "ssl.key.password=certificate" >> client-3-ssl.properties
echo "ssl.enabled.protocols=TLSv1.2,TLSv1.3" >> client-3-ssl.properties
echo "ssl.client.auth=required" >> client-3-ssl.properties

11) Update Docker Compose and rebuild it
version: '3.7'
services:
  zookeeper:
    image: 'confluentinc/cp-zookeeper'
    container_name: zookeeper
    ports:
      - '2182:2181'
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    restart: always
  kafka-1:
    image: 'confluentinc/cp-server:latest'
    container_name: kafka-1
    depends_on:
      - zookeeper
    ports:
      - '9094:9094'
      - '9097:9097'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_JVM_PERFORMANCE_OPTS: "-Xms1G -Xmx2G"
      KAFKA_MAX_MESSAGE_BYTES: 400000000
      KAFKA_REPLICA_FETCH_MAX_BYTES: 400000000
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9094,INTERNAL://kafka-1:9092,SSL://kafka-1:9097
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT,SSL:SSL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9094,INTERNAL://0.0.0.0:9092,SSL://0.0.0.0:9097
      KAFKA_SSL_KEYSTORE_FILENAME: kafka-1.keystore.jks
      KAFKA_SSL_KEY_CREDENTIALS: key-password.txt
      KAFKA_SSL_KEYSTORE_CREDENTIALS: keystore-password.txt
      KAFKA_SSL_TRUSTSTORE_CREDENTIALS: truststore-password.txt
      KAFKA_SSL_TRUSTSTORE_FILENAME: kafka-1.truststore.jks
      KAFKA_SSL_CLIENT_AUTH: 'required'
    volumes:
      - kafka-1-data:/var/lib/kafka/data
      - ./certs:/etc/kafka/secrets
      - ./configs:/etc/kafka/configs     
    restart: always
  kafka-2:
    image: 'confluentinc/cp-server:latest'
    container_name: kafka-2
    depends_on:
      - zookeeper
      - kafka-1
    ports:
      - '9095:9095'
      - '9098:9098'
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_JVM_PERFORMANCE_OPTS: "-Xms1G -Xmx2G"
      KAFKA_MAX_MESSAGE_BYTES: 400000000
      KAFKA_REPLICA_FETCH_MAX_BYTES: 400000000
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9095,INTERNAL://kafka-2:9092,SSL://kafka-2:9097
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT,SSL:SSL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
      LISTENERS: PLAINTEXT://0.0.0.0:9095,INTERNAL://0.0.0.0:9092,SSL://0.0.0.0:9097
      KAFKA_SSL_KEYSTORE_FILENAME: kafka-2.keystore.jks
      KAFKA_SSL_KEY_CREDENTIALS: key-password.txt
      KAFKA_SSL_KEYSTORE_CREDENTIALS: keystore-password.txt
      KAFKA_SSL_TRUSTSTORE_CREDENTIALS: truststore-password.txt
      KAFKA_SSL_TRUSTSTORE_FILENAME: kafka-2.truststore.jks
      KAFKA_SSL_CLIENT_AUTH: 'required'
    volumes:
      - kafka-2-data:/var/lib/kafka/data
      - ./certs:/etc/kafka/secrets
      - ./configs:/etc/kafka/configs
    restart: always
  kafka-3:
    image: 'confluentinc/cp-server:latest'
    container_name: kafka-3
    depends_on:
      - zookeeper
      - kafka-1
      - kafka-2
    ports:
      - '9096:9096'
      - '9099:9099'
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_JVM_PERFORMANCE_OPTS: "-Xms1G -Xmx2G"
      KAFKA_MAX_MESSAGE_BYTES: 400000000
      KAFKA_REPLICA_FETCH_MAX_BYTES: 400000000
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9096,INTERNAL://kafka-3:9092,SSL://kafka-3:9097
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT,SSL:SSL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
      LISTENERS: PLAINTEXT://0.0.0.0:9096,INTERNAL://0.0.0.0:9092,SSL://0.0.0.0:9097
      KAFKA_SSL_KEYSTORE_FILENAME: kafka-3.keystore.jks
      KAFKA_SSL_KEY_CREDENTIALS: key-password.txt
      KAFKA_SSL_KEYSTORE_CREDENTIALS: keystore-password.txt
      KAFKA_SSL_TRUSTSTORE_CREDENTIALS: truststore-password.txt
      KAFKA_SSL_TRUSTSTORE_FILENAME: kafka-3.truststore.jks
      KAFKA_SSL_CLIENT_AUTH: 'required'
    volumes:
      - kafka-3-data:/var/lib/kafka/data
      - ./certs:/etc/kafka/secrets
      - ./configs:/etc/kafka/configs
    restart: always
volumes:
  kafka-1-data:
  kafka-2-data:
  kafka-3-data:

12) Run
kafka-console-consumer --bootstrap-server kafka-1:9097 --topic tls-test --from-beginning --consumer.config /etc/kafka/secrets/client-1-ssl.properties

