Task 32: Different Timeout Types: Execution Timeout, Schedule-to-Close, etc.

Types of Timeouts in Temporal
A Workflow can detect different kinds of Activity Execution failures through the following timeouts:

    1) Schedule-To-Start Timeout
    2) Start-To-Close Timeout
    3) Schedule-To-Close Timeout
    4) Activity Heartbeats

1) Schedule-To-Start Timeout
What is a Schedule-To-Start Timeout in Temporal?
A Schedule-To-Start Timeout is the maximum amount of time that is allowed from when an Activity Task is scheduled (that is, placed in a Task Queue) to when a Worker starts (that is, picks up from the Task Queue) that Activity Task. In other words, it's a limit for how long an Activity Task can be enqueued.
The moment that the Task is picked by the Worker, from the Task Queue, is considered to be the start of the Activity Task Execution for the purposes of the Schedule-To-Start Timeout and associated metrics. This definition of "Start" avoids issues that a clock difference between the Temporal Service and a Worker might create.
This timeout has two primary use cases:
    *Detect whether an individual Worker has crashed.
    *Detect whether the fleet of Workers polling the Task Queue is not able to keep up with the rate of Activity Tasks.
The default Schedule-To-Start Timeout is ∞ (infinity).

2) Start-To-Close Timeout
What is a Start-To-Close Timeout in Temporal?
A Start-To-Close Timeout is the maximum time allowed for a single Activity Task Execution.
The default Start-To-Close Timeout is the same as the default Schedule-To-Close Timeout.
An Activity Execution must have either this timeout (Start-To-Close) or the Schedule-To-Close Timeout set. We recommend always setting this timeout; however, make sure that Start-To-Close Timeout is always set to be longer than the maximum possible time for the Activity Execution to complete. For long running Activity Executions, we recommend also using Activity Heartbeats and Heartbeat Timeouts.
If this timeout is reached, the following actions occur:
    *An ActivityTaskTimedOut Event is written to the Workflow Execution's mutable state.
    *If a Retry Policy dictates a retry, the Temporal Service schedules another Activity Task.
        The attempt count increments by 1 in the Workflow Execution's mutable state.
        The Start-To-Close Timeout timer is reset.

3) Schedule-To-Close Timeout
What is a Schedule-To-Close Timeout in Temporal?
A Schedule-To-Close Timeout is the maximum amount of time allowed for the overall Activity Execution, from when the first Activity Task is scheduled to when the last Activity Task, in the chain of Activity Tasks that make up the Activity Execution, reaches a Closed status.
The default Schedule-To-Close Timeout is ∞ (infinity).
An Activity Execution must have either this timeout (Schedule-To-Close) or Start-To-Close set. This timeout can be used to control the overall duration of an Activity Execution in the face of failures (repeated Activity Task Executions), without altering the Maximum Attempts field of the Retry Policy.

Note:  strongly recommended setting a Start-To-Close Timeout.
The Temporal Server doesn't detect failures when a Worker loses communication with the Server or crashes. Therefore, the Temporal Server relies on the Start-To-Close Timeout to force Activity retries.

4) Activity Heartbeat
What is an Activity Heartbeat in Temporal?
An Activity Heartbeat is a ping from the Worker that is executing the Activity to the Temporal Service. Each ping informs the Temporal Service that the Activity Execution is making progress and the Worker has not crashed.
Activity Heartbeats work in conjunction with a Heartbeat Timeout.
Activity Heartbeats are implemented within the Activity Definition. Custom progress information can be included in the Heartbeat which can then be used by the Activity Execution should a retry occur.
An Activity Heartbeat can be recorded as often as needed (e.g. once a minute or every loop iteration). It is often a good practice to Heartbeat on anything but the shortest Activity Function Execution. Temporal SDKs control the rate at which Heartbeats are sent to the Temporal Service.
Heartbeating is not required from Local Activities, and does nothing.
For long-running Activities, we recommend using a relatively short Heartbeat Timeout and a frequent Heartbeat. That way if a Worker fails it can be handled in a timely manner.
A Heartbeat can include an application layer payload that can be used to save Activity Execution progress. If an Activity Task Execution times out due to a missed Heartbeat, the next Activity Task can access and continue with that payload.
Activity Cancellations are delivered to Activities from the Temporal Service when they Heartbeat. Activities that don't Heartbeat can't receive a Cancellation. Heartbeat throttling may lead to Cancellation getting delivered later than expected.

Simple Diagram:

                     --|-- ActivityTaskScheduled  -|-                       --|--
                       |                           |                          |
                       |                           |--- Schedule-To-Start     |
                       |                           |                          |
Activity Execution ----|   ActivityTaskStarted    -|-   -|-                   |---- Schedule-To Close
                       |                                 |                    |
                       |                                 |--- Start-To-Close  |
                       |                                 |                    |
                     --|-- ActivityTaskCompleted        -|-                 --|--