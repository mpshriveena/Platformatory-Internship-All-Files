                             === Demo of Tasks 8, 9 and 10 ===

==========================================Task 8=================================================
                    Simple Nginx Application using Flask in docker
                    ==============================================
Problem Statement
=================

Deploy a basic nginx application built inside a container. For e.g., 
write a basic application in python/java (flask web app), containerize it and deploy. 
Use dockerfile for this exercise

Solution
========

cd /home/mpshriveena/Desktop/Platformatory/Daily\ Codes/january_tasks/flask_nginx_application

1) Create app.py and requirements.txt inside app folder

app.py
from flask import Flask
app = Flask(__name__)
@app.route('/')
def hello():
    return "Hello World!!"
if __name__ == '__main__':
    app.run()

requirements.txt
flask
gunicorn

2) Create nginx.conf file inside nginx folder

nginx.conf
events {
    worker_connections  1024;
}
http{
   server{
     listen 80;
     location / {
       proxy_pass  http://app:8888;
}
}
}

3) Dockerfile

FROM ubuntu:20.04
ENV DEBIAN_FRONTEND=noninteractive
RUN apt-get update && apt-get install -y python3.9 python3-pip
WORKDIR /hab
COPY ./app .
RUN pip3 install -r requirements.txt
CMD gunicorn --bind 0.0.0.0:8888 app:app  

4) docker-compose.yml

version: "3"
services:
    app:
       build:
           context: .
       ports:
           -  "8888"
    nginx:
        image: nginx:latest
        volumes:
        - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
        depends_on:
        - app
        ports:
        - "6700:80"

5) Run
docker-compose up --build
App can be viewed in url http://0.0.0.0:80

==========================================Task 9=================================================
                            Deployment for Nginx Application
                            ================================
Problem Statement
=================

Create a dockerfile (or yaml file) to deploy simple nginx container and :
- verify status of pods
- logs of pods
- provide description of pods

Solution
========

cd /home/mpshriveena/Desktop/Platformatory/Daily\ Codes/january_tasks/flask_nginx_kubernetes_application

1) Create a folder in this structure

flask_nginx_kubernetes_application
├── app
│   ├── app.py
│   ├── Dockerfile
│   └── requirements.txt
├── flask-nginx-deployment.yaml
└── nginx
    ├── Dockerfile
    └── nginx.conf

2) app.py

from flask import Flask
app = Flask(__name__)
@app.route('/')
def hello():
    return "Hello World!! This is integration of flask and Nginx and deployed in kubernetes"
if __name__ == '__main__':
    app.run()

3) Dockerfile

FROM python:3.8-slim
WORKDIR /app
COPY . /app
RUN pip install --no-cache-dir -r requirements.txt
CMD ["gunicorn", "app:app", "-b", "0.0.0.0:8000"]

4) requirements.txt

flask
gunicorn

5) flask-nginx-deployment.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: flask-app
  labels:
    app: flask-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: flask-app
  template:
    metadata:
      labels:
        app: flask-app
    spec:
      containers:
        - name: flask-app
          image: mpshriveena/flask1:latest
          ports:
            - containerPort: 8000
---
apiVersion: v1
kind: Service
metadata:
  name: flask-app
spec:
  selector:
    app: flask-app
  ports:
    - protocol: TCP
      port: 8000
      targetPort: 8000
  type: NodePort
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
  labels:
    app: nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
        - name: nginx
          image: mpshriveena/nginx1:latest
          ports:
            - containerPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: nginx
spec:
  selector:
    app: nginx
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
  type: NodePort

6) Dockerfile

FROM nginx
RUN rm /etc/nginx/conf.d/default.conf
COPY nginx.conf /etc/nginx/conf.d/

7) nginx.conf

upstream flaskapp {
server flask-app:8000;
}

server {
listen 80;

    location / {
        proxy_pass http://flaskapp;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}

8) Build the images for flask app and nginx

Create repositories in the docker hub
cd ./app
docker build -t mpshriveena/flask1:latest .
docker push mpshriveena/flask1
cd ../nginx
docker build -t mpshriveena/nginx1:latest .
docker push mpshriveena/nginx1
cd ..

9) Apply

minikube start
kubectl apply -f flask-nginx-deployment.yaml

10) Getting logs, describe and pod status

kubectl logs flask-nginx-deployment-f8b765578-czwnw
kubectl get pods
kubectl get deployments
kubectl get services
kubectl describe pod nginx-deployment-54b9c68f67-8cn2l

11) Getting url from the service

minikube service flask-app

==========================================Task 10=================================================
                            Deployment for Nginx Application
                            ================================

Problem Statement
=================

Create a deployment for nginx application:
- scale deployment from 1 to 3
- verify pod status

Solution
========

1) Create a deployment for nginx application

Change the replicas in the deploymnet of app to 3
Apply again
kubectl apply -f flask-nginx-deployment.yaml

(or)

Use the command
kubectl scale deployments/flask-app --replicas=3

====================================================================================================