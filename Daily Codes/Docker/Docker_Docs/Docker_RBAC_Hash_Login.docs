Implementation of RBAC using Hash Login in Docker Compose

cd /etc/kafka/secrets

1) Create Key Pair and Public Key
openssl genrsa -out tokenKeypair.pem 2048
openssl rsa -in tokenKeypair.pem -outform PEM -pubout -out tokenPublicKey.pem

2) Create Login Properties
echo "mds:mds" > ./login.properties

3) Create Server JAAS Configuration
# Don't need to do below if already created this file when doing sasl-plaintext
echo "KafkaServer {" >> kafka_server_jaas.conf
echo "    org.apache.kafka.common.security.plain.PlainLoginModule required" >> kafka_server_jaas.conf
echo "    username=\"platformatory\"" >> kafka_server_jaas.conf
echo "    password=\"platformatory\"" >> kafka_server_jaas.conf
echo "    user_platformatory=\"platformatory\";" >> kafka_server_jaas.conf
echo "};" >> kafka_server_jaas.conf

4) Create MDS Keystore snd Truststore with already created ca-cert
keytool -keystore mds.keystore.jks -alias localhost -validity 365 -genkey -keyalg RSA -dname "CN=localhost, OU=Streaming, O=Platformatory, L=Uttarahalli, ST=Karnataka, C=IN" -ext SAN=dns:localhost
keytool -keystore mds.keystore.jks -alias localhost -certreq -file mds-cert-file
echo subjectAltName = DNS:localhost >> mds-extfile.cnf
openssl x509 -req -CA ca-cert.pem -CAkey ca-key.pem -in mds-cert-file -out mds-cert-signed.pem -days 365 -CAcreateserial -extfile mds-extfile.cnf
keytool -keystore mds.keystore.jks -alias CARoot -import -file ca-cert.pem
keytool -keystore mds.keystore.jks -alias localhost -import -file mds-cert-signed.pem
openssl verify -CAfile ca-cert.pem mds-cert-signed.pem
#mds-cert-signed.pem: OK
keytool -importcert -file ca-cert.pem -alias CARoot -keystore mds.truststore.jks

5) Create Custom Dockerfile to use Confluent CLI within each container_name

i) For Kafka-1
cd ./kafka-1
Create Docker file
FROM confluentinc/cp-server:latest
RUN curl -sL --http1.1 https://cnfl.io/cli | sh -s -- latest -b /kafka-1
WORKDIR /kafka-1

ii) For Kafka-2
cd ./kafka-2
Create Docker file
FROM confluentinc/cp-server:latest
RUN curl -sL --http1.1 https://cnfl.io/cli | sh -s -- latest -b /kafka-2
WORKDIR /kafka-2

iii) For Kafka-3
cd ./kafka-3
Create Docker file
FROM confluentinc/cp-server:latest
RUN curl -sL --http1.1 https://cnfl.io/cli | sh -s -- latest -b /kafka-3
WORKDIR /kafka-3

6) Update Docker Compose and rebuild it
version: '3.7'
services:
  zookeeper:
    image: 'confluentinc/cp-zookeeper'
    container_name: zookeeper
    ports:
      - '2182:2181'
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - ~/kafka/data/zookeeper_data:/var/lib/zookeeper/data
      - ~/kafka/data/zookeeper_log:/var/lib/zookeeper/log
    restart: always
  kafka-1:
    build:
      context: .
      dockerfile: kafka-1/Dockerfile
    image: kafka-1-custom
    container_name: kafka-1
    depends_on:
      - zookeeper
    ports:
      - '9094:9094'
      - '9097:9097'
      - '8090:8090'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      ZOOKEEPER_SASL_ENABLED: 'false'
      KAFKA_JVM_PERFORMANCE_OPTS: "-Xms1G -Xmx2G"
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9094,INTERNAL://kafka-1:9092,TOKEN://kafka-1:9097,SASL_PLAINTEXT://kafka-1:9064,SASL_SSL://kafka-1:9061
      KAFKA_SECURITY_INTER_BROKER_PROTOCOL: SASL_SSL
      KAFKA_SASL_MECHANISM_INTER_BROKER_PROTOCOL: PLAIN
      KAFKA_SASL_ENABLED_MECHANISMS: PLAIN,OAUTHBEARER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:SASL_SSL,PLAINTEXT:PLAINTEXT,TOKEN:SASL_PLAINTEXT,SASL_PLAINTEXT:SASL_PLAINTEXT,SASL_SSL:SASL_SSL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9094,INTERNAL://0.0.0.0:9092,TOKEN://0.0.0.0:9097,SASL_PLAINTEXT://0.0.0.0:9064,SASL_SSL://0.0.0.0:9061
      KAFKA_OPTS: "-Djava.security.auth.login.config=/etc/kafka/configs/kafka_server_jaas.conf"
      KAFKA_SSL_KEYSTORE_FILENAME: kafka-1.keystore.jks
      KAFKA_SSL_KEY_CREDENTIALS: key-password.txt
      KAFKA_SSL_KEYSTORE_CREDENTIALS: keystore-password.txt
      KAFKA_SSL_TRUSTSTORE_CREDENTIALS: truststore-password.txt
      KAFKA_SSL_TRUSTSTORE_FILENAME: kafka-1.truststore.jks
      KAFKA_SSL_CLIENT_AUTH: 'required'
      KAFKA_SUPER_USERS: User:admin;User:mds;User:superUser;User:platformatory
      KAFKA_CONFLUENT_METADATA_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_METADATA_SERVER_TOKEN_KEY_PATH: /etc/kafka/secrets/tokenKeypair.pem
      KAFKA_AUTHORIZER_CLASS_NAME: io.confluent.kafka.security.authorizer.ConfluentServerAuthorizer
      KAFKA_CONFLUENT_AUTHORIZER_ACCESS_RULE_PROVIDERS: CONFLUENT
      KAFKA_CONFLUENT_METADATA_SERVER_LISTENERS: https://0.0.0.0:8090
      KAFKA_CONFLUENT_METADATA_SERVER_ADVERTISED_LISTENERS: https://localhost:8090
      KAFKA_CONFLUENT_METADATA_SERVER_AUTHENTICATION_METHOD: BEARER
      KAFKA_CONFLUENT_METADATA_SERVER_USER_STORE: FILE
      KAFKA_CONFLUENT_METADATA_SERVER_USER_STORE_FILE_PATH: /etc/kafka/secrets/login.properties
      KAFKA_LISTENER_NAME_CLIENT_SASL_ENABLED_MECHANISMS: PLAIN
      KAFKA_LISTENER_NAME_TOKEN_SASL_ENABLED_MECHANISMS: OAUTHBEARER
      KAFKA_LISTENER_NAME_TOKEN_OAUTHBEARER_SASL_JAAS_CONFIG: |
              org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \
              publicKeyPath="/etc/kafka/secrets/tokenPublicKey.pem";
      KAFKA_LISTENER_NAME_TOKEN_OAUTHBEARER_SASL_SERVER_CALLBACK_HANDLER_CLASS: io.confluent.kafka.server.plugins.auth.token.TokenBearerValidatorCallbackHandler
      KAFKA_LISTENER_NAME_TOKEN_OAUTHBEARER_SASL_LOGIN_CALLBACK_HANDLER_CLASS: io.confluent.kafka.server.plugins.auth.token.TokenBearerServerLoginCallbackHandler
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_SECURITY_EVENT_LOGGER_EXPORTER_KAFKA_TOPIC_REPLICAS: 1
      KAFKA_LISTENER_NAME_INTERNAL_SASL_ENABLED_MECHANISMS: PLAIN
      KAFKA_LISTENER_NAME_INTERNAL_PLAIN_SASL_JAAS_CONFIG: |
              org.apache.kafka.common.security.plain.PlainLoginModule required \
              username="platformatory" \
              password="platformatory" \
              user_platformatory="platformatory" \
              user_mds="mds";
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
      KAFKA_CONFLUENT_METADATA_SERVER_SSL_TRUSTSTORE_LOCATION: /etc/kafka/secrets/mds.truststore.jks
      KAFKA_CONFLUENT_METADATA_SERVER_SSL_TRUSTSTORE_PASSWORD: certificate
      KAFKA_CONFLUENT_METADATA_SERVER_SSL_KEYSTORE_LOCATION: /etc/kafka/secrets/mds.keystore.jks
      KAFKA_CONFLUENT_METADATA_SERVER_SSL_KEYSTORE_PASSWORD: certificate
      KAFKA_CONFLUENT_METADATA_SERVER_SSL_KEY_PASSWORD: certificate
      KAFKA_CONFLUENT_METADATA_SERVER_SSL_CIPHER_SUITES: ${SSL_CIPHER_SUITES}
      KAFKA_LISTENER_NAME_SSL_SSL_PRINCIPAL_MAPPING_RULES: RULE:^CN=([a-zA-Z0-9.]*).*$$/$$1/ , DEFAULT
      KAFKA_LISTENER_NAME_TOKEN_SSL_PRINCIPAL_MAPPING_RULES: RULE:^CN=([a-zA-Z0-9.]*).*$$/$$1/ , DEFAULT
      kAFKA_CONFLUENT_METADATA_SERVER_TOKEN_SIGNATURE_ALGORITHM: RS256
      PATH: "/home/appuser/bin:$PATH"
    volumes:
      - kafka-1-data:/var/lib/kafka/data
      - ./certs:/etc/kafka/secrets
      - ./configs:/etc/kafka/configs      
    restart: always
  kafka-2:
    build:
      context: .
      dockerfile: kafka-2/Dockerfile
    image: kafka-2-custom
    container_name: kafka-2
    depends_on:
      - zookeeper
      - kafka-1
    ports:
      - '9095:9095'
      - '9098:9098'
      - '8091:8091'
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      ZOOKEEPER_SASL_ENABLED: 'false'
      KAFKA_JVM_PERFORMANCE_OPTS: "-Xms1G -Xmx2G"
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9095,INTERNAL://kafka-2:9092,TOKEN://kafka-2:9098,SASL_PLAINTEXT://kafka-2:9065,SASL_SSL://kafka-2:9062
      KAFKA_SECURITY_INTER_BROKER_PROTOCOL: SASL_SSL
      KAFKA_SASL_MECHANISM_INTER_BROKER_PROTOCOL: PLAIN
      KAFKA_SASL_ENABLED_MECHANISMS: PLAIN,OAUTHBEARER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:SASL_SSL,PLAINTEXT:PLAINTEXT,TOKEN:SASL_PLAINTEXT,SASL_PLAINTEXT:SASL_PLAINTEXT,SASL_SSL:SASL_SSL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9095,INTERNAL://0.0.0.0:9092,TOKEN://0.0.0.0:9098,SASL_PLAINTEXT://0.0.0.0:9065,SASL_SSL://0.0.0.0:9062
      KAFKA_OPTS: "-Djava.security.auth.login.config=/etc/kafka/configs/kafka_server_jaas.conf"
      KAFKA_SSL_KEYSTORE_FILENAME: kafka-2.keystore.jks
      KAFKA_SSL_KEY_CREDENTIALS: key-password.txt
      KAFKA_SSL_KEYSTORE_CREDENTIALS: keystore-password.txt
      KAFKA_SSL_TRUSTSTORE_CREDENTIALS: truststore-password.txt
      KAFKA_SSL_TRUSTSTORE_FILENAME: kafka-2.truststore.jks
      KAFKA_SSL_CLIENT_AUTH: 'required'
      KAFKA_SUPER_USERS: User:admin;User:mds;User:superUser;User:platformatory
      KAFKA_CONFLUENT_METADATA_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_METADATA_SERVER_TOKEN_KEY_PATH: /etc/kafka/secrets/tokenKeypair.pem
      KAFKA_AUTHORIZER_CLASS_NAME: io.confluent.kafka.security.authorizer.ConfluentServerAuthorizer
      KAFKA_CONFLUENT_AUTHORIZER_ACCESS_RULE_PROVIDERS: CONFLUENT
      KAFKA_CONFLUENT_METADATA_SERVER_LISTENERS: https://0.0.0.0:8091
      KAFKA_CONFLUENT_METADATA_SERVER_ADVERTISED_LISTENERS: https://localhost:8091
      KAFKA_CONFLUENT_METADATA_SERVER_AUTHENTICATION_METHOD: BEARER
      KAFKA_CONFLUENT_METADATA_SERVER_USER_STORE: FILE
      KAFKA_CONFLUENT_METADATA_SERVER_USER_STORE_FILE_PATH: /etc/kafka/secrets/login.properties
      KAFKA_LISTENER_NAME_TOKEN_SASL_ENABLED_MECHANISMS: OAUTHBEARER
      KAFKA_LISTENER_NAME_TOKEN_OAUTHBEARER_SASL_JAAS_CONFIG: |
              org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \
              publicKeyPath="/etc/kafka/secrets/tokenPublicKey.pem";
      KAFKA_LISTENER_NAME_TOKEN_OAUTHBEARER_SASL_SERVER_CALLBACK_HANDLER_CLASS: io.confluent.kafka.server.plugins.auth.token.TokenBearerValidatorCallbackHandler
      KAFKA_LISTENER_NAME_TOKEN_OAUTHBEARER_SASL_LOGIN_CALLBACK_HANDLER_CLASS: io.confluent.kafka.server.plugins.auth.token.TokenBearerServerLoginCallbackHandler
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_SECURITY_EVENT_LOGGER_EXPORTER_KAFKA_TOPIC_REPLICAS: 1
      KAFKA_LISTENER_NAME_INTERNAL_SASL_ENABLED_MECHANISMS: PLAIN
      KAFKA_LISTENER_NAME_INTERNAL_PLAIN_SASL_JAAS_CONFIG: |
              org.apache.kafka.common.security.plain.PlainLoginModule required \
              username="platformatory" \
              password="platformatory" \
              user_platformatory="platformatory" \
              user_mds="mds";
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
      KAFKA_CONFLUENT_METADATA_SERVER_SSL_TRUSTSTORE_LOCATION: /etc/kafka/secrets/mds.truststore.jks
      KAFKA_CONFLUENT_METADATA_SERVER_SSL_TRUSTSTORE_PASSWORD: certificate
      KAFKA_CONFLUENT_METADATA_SERVER_SSL_KEYSTORE_LOCATION: /etc/kafka/secrets/mds.keystore.jks
      KAFKA_CONFLUENT_METADATA_SERVER_SSL_KEYSTORE_PASSWORD: certificate
      KAFKA_CONFLUENT_METADATA_SERVER_SSL_KEY_PASSWORD: certificate
      KAFKA_CONFLUENT_METADATA_SERVER_SSL_CIPHER_SUITES: ${SSL_CIPHER_SUITES}
      KAFKA_LISTENER_NAME_SSL_SSL_PRINCIPAL_MAPPING_RULES: RULE:^CN=([a-zA-Z0-9.]*).*$$/$$1/ , DEFAULT
      KAFKA_LISTENER_NAME_TOKEN_SSL_PRINCIPAL_MAPPING_RULES: RULE:^CN=([a-zA-Z0-9.]*).*$$/$$1/ , DEFAULT
      kAFKA_CONFLUENT_METADATA_SERVER_TOKEN_SIGNATURE_ALGORITHM: RS256
      PATH: "/home/appuser/bin:$PATH"
    volumes:
      - kafka-2-data:/var/lib/kafka/data
      - ./certs:/etc/kafka/secrets
      - ./configs:/etc/kafka/configs
    restart: always
  kafka-3:
    build:
      context: .
      dockerfile: kafka-3/Dockerfile
    image: kafka-3-custom
    container_name: kafka-3
    depends_on:
      - zookeeper
      - kafka-1
      - kafka-2
    ports:
      - '9096:9096'
      - '9099:9099'
      - '8092:8092'
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      ZOOKEEPER_SASL_ENABLED: 'false'
      KAFKA_JVM_PERFORMANCE_OPTS: "-Xms1G -Xmx2G"
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9096,INTERNAL://kafka-3:9092,TOKEN://kafka-3:9099,SASL_PLAINTEXT://kafka-3:9066,SASL_SSL://kafka-3:9063
      KAFKA_SECURITY_INTER_BROKER_PROTOCOL: SASL_SSL
      KAFKA_SASL_MECHANISM_INTER_BROKER_PROTOCOL: PLAIN
      KAFKA_SASL_ENABLED_MECHANISMS: PLAIN,OAUTHBEARER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:SASL_SSL,PLAINTEXT:PLAINTEXT,TOKEN:SASL_PLAINTEXT,SASL_PLAINTEXT:SASL_PLAINTEXT,SASL_SSL:SASL_SSL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9096,INTERNAL://0.0.0.0:9092,TOKEN://0.0.0.0:9099,SASL_PLAINTEXT://0.0.0.0:9066,SASL_SSL://0.0.0.0:9063
      KAFKA_OPTS: "-Djava.security.auth.login.config=/etc/kafka/configs/kafka_server_jaas.conf"
      KAFKA_SSL_KEYSTORE_FILENAME: kafka-3.keystore.jks
      KAFKA_SSL_KEY_CREDENTIALS: key-password.txt
      KAFKA_SSL_KEYSTORE_CREDENTIALS: keystore-password.txt
      KAFKA_SSL_TRUSTSTORE_CREDENTIALS: truststore-password.txt
      KAFKA_SSL_TRUSTSTORE_FILENAME: kafka-3.truststore.jks
      KAFKA_SSL_CLIENT_AUTH: 'required'
      KAFKA_SUPER_USERS: User:admin;User:mds;User:superUser;User:platformatory
      KAFKA_CONFLUENT_METADATA_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_METADATA_SERVER_TOKEN_KEY_PATH: /etc/kafka/secrets/tokenKeypair.pem
      KAFKA_AUTHORIZER_CLASS_NAME: io.confluent.kafka.security.authorizer.ConfluentServerAuthorizer
      KAFKA_CONFLUENT_AUTHORIZER_ACCESS_RULE_PROVIDERS: CONFLUENT
      KAFKA_CONFLUENT_METADATA_SERVER_LISTENERS: https://0.0.0.0:8092
      KAFKA_CONFLUENT_METADATA_SERVER_ADVERTISED_LISTENERS: https://localhost:8092
      KAFKA_CONFLUENT_METADATA_SERVER_AUTHENTICATION_METHOD: BEARER
      KAFKA_CONFLUENT_METADATA_SERVER_USER_STORE: FILE
      KAFKA_CONFLUENT_METADATA_SERVER_USER_STORE_FILE_PATH: /etc/kafka/secrets/login.properties
      KAFKA_LISTENER_NAME_TOKEN_SASL_ENABLED_MECHANISMS: OAUTHBEARER
      KAFKA_LISTENER_NAME_TOKEN_OAUTHBEARER_SASL_JAAS_CONFIG: |
              org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \
              publicKeyPath="/etc/kafka/secrets/tokenPublicKey.pem";
      KAFKA_LISTENER_NAME_TOKEN_OAUTHBEARER_SASL_SERVER_CALLBACK_HANDLER_CLASS: io.confluent.kafka.server.plugins.auth.token.TokenBearerValidatorCallbackHandler
      KAFKA_LISTENER_NAME_TOKEN_OAUTHBEARER_SASL_LOGIN_CALLBACK_HANDLER_CLASS: io.confluent.kafka.server.plugins.auth.token.TokenBearerServerLoginCallbackHandler
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_SECURITY_EVENT_LOGGER_EXPORTER_KAFKA_TOPIC_REPLICAS: 1
      KAFKA_LISTENER_NAME_INTERNAL_SASL_ENABLED_MECHANISMS: PLAIN
      KAFKA_LISTENER_NAME_INTERNAL_PLAIN_SASL_JAAS_CONFIG: |
              org.apache.kafka.common.security.plain.PlainLoginModule required \
              username="platformatory" \
              password="platformatory" \
              user_platformatory="platformatory" \
              user_mds="mds";
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
      KAFKA_CONFLUENT_METADATA_SERVER_SSL_TRUSTSTORE_LOCATION: /etc/kafka/secrets/mds.truststore.jks
      KAFKA_CONFLUENT_METADATA_SERVER_SSL_TRUSTSTORE_PASSWORD: certificate
      KAFKA_CONFLUENT_METADATA_SERVER_SSL_KEYSTORE_LOCATION: /etc/kafka/secrets/mds.keystore.jks
      KAFKA_CONFLUENT_METADATA_SERVER_SSL_KEYSTORE_PASSWORD: certificate
      KAFKA_CONFLUENT_METADATA_SERVER_SSL_KEY_PASSWORD: certificate
      KAFKA_CONFLUENT_METADATA_SERVER_SSL_CIPHER_SUITES: ${SSL_CIPHER_SUITES}
      KAFKA_LISTENER_NAME_SSL_SSL_PRINCIPAL_MAPPING_RULES: RULE:^CN=([a-zA-Z0-9.]*).*$$/$$1/ , DEFAULT
      KAFKA_LISTENER_NAME_TOKEN_SSL_PRINCIPAL_MAPPING_RULES: RULE:^CN=([a-zA-Z0-9.]*).*$$/$$1/ , DEFAULT
      kAFKA_CONFLUENT_METADATA_SERVER_TOKEN_SIGNATURE_ALGORITHM: RS256
      PATH: "/home/appuser/bin:$PATH"
    volumes:
      - kafka-3-data:/var/lib/kafka/data
      - ./certs:/etc/kafka/secrets
      - ./configs:/etc/kafka/configs
    restart: always
volumes:
  kafka-1-data:
  kafka-2-data:
  kafka-3-data:

7) Confluent Command is stored in the following directory. Thats why Environment variable is added in the Docker Compose file
/home/appuser/bin/confluent

8) LOgin using MDS url and ca-cert
confluent login --url https://localhost:8090 --certificate-authority-path /etc/kafka/secrets/ca-cert.pem

9) Run the following command to find the cluster ID
cat /var/lib/kafka/data/meta.properties
# Output will be similar to this
#Sat Nov 02 18:12:36 GMT 2024
broker.id=1
version=0
cluster.id=xtkfwzZcR-2jocfspovGmA

10) Execute the following command to create respective role bindings
confluent iam rbac role-binding create --principal User:$USER_CLIENT_A --role ResourceOwner --resource Topic:$TOPIC1 --kafka-cluster $KAFKA_CLUSTER_ID
confluent iam rbac role-binding create --principal User:$USER_CLIENT_A --role DeveloperRead --resource Group:console-consumer- --prefix --kafka-cluster $KAFKA_CLUSTER_ID
confluent iam rbac role-binding create --principal User:$USER_ADMIN_SYSTEM --role SystemAdmin --kafka-cluster $KAFKA_CLUSTER_ID

Eg:
confluent iam rbac role-binding create --principal User:platformatory --role SystemAdmin --kafka-cluster xtkfwzZcR-2jocfspovGmA
confluent iam rbac role-binding create --principal User:resourceowner --role ResourceOwner --resource Topic:rbac-test --kafka-cluster xtkfwzZcR-2jocfspovGmA
confluent iam rbac role-binding list --principal User:resourceowner --kafka-cluster xtkfwzZcR-2jocfspovGmA
confluent iam rbac role-binding list --role ResourceOwner --kafka-cluster xtkfwzZcR-2jocfspovGmA

11) THe Confluent CLI installation command is taken from below URL

https://docs.confluent.io/confluent-cli/1.36/install.html