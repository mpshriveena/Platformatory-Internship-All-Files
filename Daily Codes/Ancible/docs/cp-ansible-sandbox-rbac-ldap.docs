Enabling RBAC-LDAP in cp-ansible-sandbox

cd /home/mpshriveena/Desktop/Platformatory/Daily\ Codes/Ancible/rbac/cp-ansible-sandbox

1) docker-compose is modified to add volumes and LDAP
docker-compose.yml

version: '3'

services:
  ansible-control:
    build:
      context: . 
      dockerfile: Dockerfile
    hostname: ansible-control
    volumes:
      - ./cp-ansible:/ansible/ansible_collections/confluent/platform:rw
      - ./inventories:/ansible/inventories
      - ./share:/usr/share/cp-ansible-sandbox
    environment:
      - ANSIBLE_GATHERING=smart
      - ANSIBLE_HOST_KEY_CHECKING=False
      - ANSIBLE_RETRY_FILES_ENABLED=False
      - ANSIBLE_COLLECTIONS_PATH=/ansible/ansible_collections
      - ANSIBLE_SSH_PIPELINING=True
      - ANSIBLE_INVENTORY=/ansible/inventories/ansible-inventory.yml
  zookeeper1:
    build:
      context: ./  # This is the directory where your Dockerfile-inventory-node resides
      dockerfile: Dockerfile-inventory-node  # This is the name of your Dockerfile
    hostname: zookeeper1
    privileged: true
    cap_add:
      - ALL
    ports:
      - "2222:22"
    volumes:
      - ./share:/usr/share/cp-ansible-sandbox
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    tmpfs:
      - /run/lock
      - /run
      - /tmp
    environment:
      - DEBIAN_FRONTEND=non-interactive
  
  zookeeper2:
    build:
      context: ./  # This is the directory where your Dockerfile-inventory-node resides
      dockerfile: Dockerfile-inventory-node  # This is the name of your Dockerfile
    hostname: zookeeper2
    privileged: true
    cap_add:
      - ALL
    ports:
      - "2223:22"
    volumes:
      - ./share:/usr/share/cp-ansible-sandbox
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    tmpfs:
      - /run/lock
      - /run
      - /tmp
    environment:
      - DEBIAN_FRONTEND=non-interactive      
  zookeeper3:
    build:
      context: ./  # This is the directory where your Dockerfile-inventory-node resides
      dockerfile: Dockerfile-inventory-node  # This is the name of your Dockerfile
    hostname: zookeeper3
    privileged: true
    cap_add:
      - ALL
    ports:
      - "2224:22"
    volumes:
      - ./share:/usr/share/cp-ansible-sandbox
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    tmpfs:
      - /run/lock
      - /run
      - /tmp
    environment:
      - DEBIAN_FRONTEND=non-interactive

  kafka1:
    build:
      context: ./  # This is the directory where your Dockerfile-inventory-node resides
      dockerfile: Dockerfile-inventory-node  # This is the name of your Dockerfile
    hostname: kafka1
    privileged: true
    cap_add:
      - ALL
    ports:
      - "2225:22"
    volumes:
      - ./share:/usr/share/cp-ansible-sandbox
      - ./client:/etc/kafka/client
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    tmpfs:
      - /run/lock
      - /run
      - /tmp
    environment:
      - DEBIAN_FRONTEND=non-interactive
      - KAFKA_HEAP_OPTS="-Xms1G -Xmx2G"

  kafka2:
    build:
      context: ./  # This is the directory where your Dockerfile-inventory-node resides
      dockerfile: Dockerfile-inventory-node  # This is the name of your Dockerfile
    hostname: kafka2
    privileged: true
    cap_add:
      - ALL
    ports:
      - "2226:22"
    volumes:
      - ./share:/usr/share/cp-ansible-sandbox
      - ./client:/etc/kafka/client
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    tmpfs:
      - /run/lock
      - /run
      - /tmp
    environment:
      - DEBIAN_FRONTEND=non-interactive
      - KAFKA_HEAP_OPTS="-Xms1G -Xmx2G"
  kafka3:
    build:
      context: ./  # This is the directory where your Dockerfile-inventory-node resides
      dockerfile: Dockerfile-inventory-node  # This is the name of your Dockerfile
    hostname: kafka3
    privileged: true
    cap_add:
      - ALL
    ports:
      - "2227:22"
    volumes:
      - ./share:/usr/share/cp-ansible-sandbox
      - ./client:/etc/kafka/client
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    tmpfs:
      - /run/lock
      - /run
      - /tmp
    environment:
      - DEBIAN_FRONTEND=non-interactive
      - KAFKA_HEAP_OPTS="-Xms1G -Xmx2G"

  control-center:
    build:
      context: ./  # This is the directory where your Dockerfile-inventory-node resides
      dockerfile: Dockerfile-inventory-node  # This is the name of your Dockerfile
    hostname: control-center
    privileged: true
    cap_add:
      - ALL
    ports:
      - "2228:22"
      - "9021:9021"
    volumes:
      - ./share:/usr/share/cp-ansible-sandbox
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    tmpfs:
      - /run/lock
      - /run
      - /tmp:exec,mode=777
    environment:
      - DEBIAN_FRONTEND=non-interactive

  ldap:
    image: avinashupadhya99/example_com_openldap:1.0.0
    container_name: ldap
    hostname: ldap
    environment:
      - LDAP_ORGANISATION=Example Company
      - LDAP_DOMAIN=example.com
      - LDAP_ADMIN_PASSWORD=secret
    ports:
      - "389:389"      # LDAP port
      - "636:636"      # LDAPS port (secure)
    volumes:
      - ldap_data:/var/lib/ldap
      - ldap_config:/etc/ldap
    restart: always

volumes:
  ldap_data:
  ldap_config:

2) Up the container
docker-compose up --build
docker-compose ps -a

3) Outside container, setup ssh keys
./setup-ssh-keys.sh

4) Go inside ansible control node
sudo docker exec -u root -it cp-ansible-sandbox_ansible-control_1 /bin/bash

5) To enable RBAC, make changes according to the following in the inventory/ancible-inventory.yml file.

---
all:
  vars:
    ansible_connection: ssh
    ansible_user: root
    ansible_become: true
    ansible_ssh_private_key_file: /root/.ssh/id_rsa
    ssl_keystore_filepath: "/ansible/ansible_collections/confluent/platform/certs/{{inventory_hostname}}.server.keystore.jks"
    ssl_keystore_key_password: certificate
    ssl_keystore_store_password: certificate
    ssl_truststore_filepath: "/ansible/ansible_collections/confluent/platform/certs/{{inventory_hostname}}.server.truststore.jks"
    ssl_truststore_password: certificate
    sasl_protocol: plain
    sasl_plain_users:
      admin:
        principal: 'admin'
        password: 'secret'
      control_center:
        principal: 'control'
        password: 'controlsystem'
    rbac_enabled: true
    create_mds_certs: false
    token_services_public_pem_file: /ansible/ansible_collections/confluent/platform/keys/tokenPublicKey.pem
    token_services_private_pem_file: /ansible/ansible_collections/confluent/platform/keys/tokenKeypair.pem
    mds_super_user: rahul
    mds_super_user_password: rahuldevops
    confluent_cli_download_enabled: true
    kafka_broker_custom_listeners:
      client:
        name: CLIENT
        port: 9093
    control_center_ldap_user: control
    control_center_ldap_password: controlsystem
    kafka_broker_custom_properties:
      ldap.java.naming.factory.initial: com.sun.jndi.ldap.LdapCtxFactory
      ldap.com.sun.jndi.ldap.read.timeout: 3000
      ldap.java.naming.provider.url: ldap://ldap:389
      ldap.java.naming.security.principal: cn=admin,dc=example,dc=com
      ldap.java.naming.security.credentials: secret
      ldap.java.naming.security.authentication: simple
      ldap.search.mode: GROUPS
      ldap.user.search.base: OU=users,DC=example,DC=com
      ldap.group.search.base: OU=groups,DC=example,DC=com
      ldap.user.name.attribute: cn
      ldap.user.search.scope: 2
      ldap.user.memberof.attribute.pattern: cn=(.*),ou=groups,dc=example,dc=com
      ldap.group.member.attribute.pattern: cn=(.*),ou=.*,ou=users,dc=example,dc=com
      ldap.group.name.attribute: cn
      ldap.group.member.attribute: member
      ldap.user.object.class: person
      ldap.group.object.class: groupOfNames
      ldap.logger.level: DEBUG
      confluent.metadata.server.enable: true
      super.users: "User:admin;User:rahul;User:control"
      

zookeeper:
  hosts:
    zookeeper1:
    zookeeper2:
    zookeeper3:

kafka_broker:
  hosts:
    kafka1:
      kafka_broker_principal: "User:kafka1"
    kafka2:
      kafka_broker_principal: "User:kafka2"
    kafka3:
      kafka_broker_principal: "User:kafka3"

control_center:
  hosts:
    control-center:

6) Execute the following command
ansible-playbook confluent.platform.all

7) SSH into the kafka1 container
ssh root@kafka1

8) client-1-ssl.properties
sasl.mechanism=OAUTHBEARER
security.protocol=SASL_PLAINTEXT
sasl.login.callback.handler.class=io.confluent.kafka.clients.plugins.auth.token.TokenUserLoginCallbackHandler
sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required username="tim" password="timdeveloper" metadataServerUrls="http://kafka1:8090";

9) To see the contents of LDAP,
sudo docker exec -u root -it ldap /bin/bash
ldapsearch -h 0.0.0.0 -p 389 -D cn=admin,dc=example,dc=com -w secret -b dc=example,dc=com objectclass=*

10) Login to mds
confluent login --url http://kafka1:8090

11) To get cluster ID
cat /var/lib/kafka/data/meta.properties

12) To create role-bindings
confluent iam rbac role-binding create --principal User:rahul --role SystemAdmin --kafka-cluster CJr4ec8xTZGttlAm8zf1Ow
confluent iam rbac role-binding create --principal User:will --role DeveloperRead --resource Topic:rbac-test --kafka-cluster CJr4ec8xTZGttlAm8zf1Ow
confluent iam rbac role-binding create --principal User:deepak --role SystemAdmin --kafka-cluster CJr4ec8xTZGttlAm8zf1Ow
confluent iam rbac role-binding create --principal User:will --role SystemAdmin --kafka-cluster CJr4ec8xTZGttlAm8zf1Ow
confluent iam rbac role-binding create --principal Group:KafkaAdmin --role DeveloperWrite --resource Topic:rbac-test --kafka-cluster CJr4ec8xTZGttlAm8zf1Ow
confluent iam rbac role-binding create --principal Group:FrontendDev --role SystemAdmin --kafka-cluster CJr4ec8xTZGttlAm8zf1Ow
confluent iam rbac role-binding create --principal Group:KafkaAdmin --role SystemAdmin --kafka-cluster CJr4ec8xTZGttlAm8zf1Ow
confluent iam rbac role-binding list --role DeveloperWrite --kafka-cluster CJr4ec8xTZGttlAm8zf1Ow
confluent iam rbac role-binding list --role SystemAdmin --kafka-cluster CJr4ec8xTZGttlAm8zf1Ow
confluent iam rbac role-binding delete --principal User:deepak --role SystemAdmin --kafka-cluster CJr4ec8xTZGttlAm8zf1Ow

Both group-based and user-based search works.
For example if I create role bindings for Group KafkaAdmin, then the users under that group get those roles.
Also If role-binding is assigned individually to a particular user, it works.

9) Working
Now successfully
kafka-topics --bootstrap-server kafka1:9092 --list
this won't work

But
kafka-topics --bootstrap-server kafka1:9092 --list --command-config /etc/kafka/client/configs/client-1-ssl.properties
this works if the user mentioned in the client config is present within the search base of ldap and role-binding is also configured.
If the user is present in the ldap but not assigned any role-bindings, then he is authenticated but not authorized to access the topics.

