Task 29: Using Temporal's Built-in Logging

How to log from a Workflow?

Send logs and errors to a logging service, so that when things go wrong, 
you can see what happened.
The SDK core uses WARN for its default logging level.
You can log from a Workflow using Python's standard library, by importing the logging module logging.

Step 1:
Set your logging configuration to a level you want to expose logs to. 
The following example sets the logging information level to INFO.
logging.basicConfig(level=logging.INFO)

Step 2:
Then in your Workflow, set your logger and level on the Workflow. 
The following example logs the Workflow.
Eg :
workflow.logger.info("Workflow input parameter: %s" % name)

Let's create a simple activity for logging
Every files are same as simple_activity except activity_workflow.py
activity_workflow.py

import logging
from datetime import timedelta
from temporalio import workflow
from activity import greet_in_english
logging.basicConfig(level=logging.INFO) # Configuring the logging system
@workflow.defn
class GreetingWorkflow:
    @workflow.run
    async def run(self, name: str) -> str:
        workflow.logger.info(f"Received input parameter: {name}")
        try:
            workflow.logger.debug("Calling greet_in_english activity...")
            greeting = await workflow.execute_activity(
                greet_in_english,
                name,
                start_to_close_timeout=timedelta(seconds=5),
            )
            workflow.logger.info(f"Received greeting: {greeting}")
            return greeting
        except Exception as e:
            workflow.logger.error(f"An error occurred: {str(e)}")
            raise