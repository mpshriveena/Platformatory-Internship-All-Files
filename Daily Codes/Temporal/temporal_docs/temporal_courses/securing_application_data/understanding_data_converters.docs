Understanding Data Converters

1) What is Data Conversion in Temporal?

Data Converters in Temporal are SDK components that handle the serialization and encoding of data transmitted and received by a Temporal client. Workflow input and output need to be serialized and deserialized so they can be sent as JSON to the Temporal Cluster.
By default, input payloads are serialized, using a stock set of payload converters, but they are not further encoded. This is configurable.

Default Data Converter
When you initiate a Workflow Execution and pass some input, the input is serialized using a Data Converter. Each Temporal SDK includes and uses a default Data Converter. The default Data Converter converts values to bytes using a series of Payload Converters that supports binary, Protocol Buffers (protobuf), and JSON formats. It encodes values in the following order:
    --> Null
    --> Byte array
    --> Protobuf JSON
    --> JSON

Encoding and Decoding Your Data
Data encoding is performed by the client
Data decoding may be performed by your application logic during your Workflows or Activities

2) Working with Sensitive Data
A Custom Codec allows a developer to transform the payload of a message sent or received by a Temporal Client. Developers often use them to maintain the confidentiality of sensitive data by encrypting it before sending and decrypting it upon receipt. This ensures that the data is encrypted as it travels across the network and when it is stored in the Event History, readable only by those with access to the key. We advise against putting sensitive information in Search Attribute values, since they are not encrypted.

Implementing Codec
codec.py

from typing import Iterable, List

import cramjam
from temporalio.api.common.v1 import Payload
from temporalio.converter import PayloadCodec


class EncryptionCodec(PayloadCodec):
    async def encode(self, payloads: Iterable[Payload]) -> List[Payload]:
            return [
                    Payload(
                            metadata={
                                    "encoding": b"binary/snappy",
                            },
                            data=(bytes(cramjam.snappy.compress(p.SerializeToString()))),
                    )
                    for p in payloads
            ]
    async def decode(self, payloads: Iterable[Payload]) -> List[Payload]:
            ret: List[Payload] = []
            for p in payloads:
                    if p.metadata.get("encoding", b"").decode() != "binary/snappy":
                            ret.append(p)
                            continue
                    ret.append(Payload.FromString(bytes(cramjam.snappy.decompress(p.data))))
            return ret

client.py

import asyncio
import sys
from workflow import GreetSomeone
from codec import EncryptionCodec
import temporalio
import dataclasses

from temporalio.client import Client
async def main():
    client = await Client.connect(
        "localhost:7233",
        data_converter=dataclasses.replace(
                temporalio.converter.default(), payload_codec=EncryptionCodec()
        ),
)
    handle = await client.start_workflow(
        GreetSomeone.run,
        sys.argv[1],
        id="greeting-workflow",
        task_queue="greeting-tasks",
    )
    print(f"Started workflow. Workflow ID: {handle.id}, RunID {handle.result_run_id}")
    result = await handle.result()
    print(f"Result: {result}")
if __name__ == "__main__":
    asyncio.run(main())

worker.py

import asyncio
from temporalio.client import Client
from temporalio.worker import Worker
from workflow import GreetSomeone
from codec import EncryptionCodec
import temporalio
import dataclasses
async def main():
    client = await Client.connect(
        "localhost:7233",
        data_converter=dataclasses.replace(
                temporalio.converter.default(), payload_codec=EncryptionCodec()
        ),
)
    worker = Worker(client, task_queue="greeting-tasks", workflows=[GreetSomeone])
    await worker.run()
if __name__ == "__main__":
    asyncio.run(main())

workflow.py

from temporalio import workflow
@workflow.defn
class GreetSomeone():
    @workflow.run
    async def run(self, name:str) -> str:
        return f"Hello {name}!"


3) Failure Converters

client = await Client.connect(
        "localhost:7233",
        # Use the default converter, but change the codec
        data_converter=dataclasses.replace(
                temporalio.converter.default(), payload_codec=EncryptionCodec(),
                failure_converter_class=temporalio.converter.DefaultFailureConverterWithEncodedAttributes,
        )
)

4) Composite Data Converters
A Composite Data Converter is used to apply custom, type-specific Payload Converters in a specified order. A Composite Data Converter can be comprised of custom rules that you created, and it can also leverage the default Data Converters built into Temporal. It defines these rules in this order:
DefaultPayloadConverter.default_encoding_payload_converters = (
    BinaryNullPayloadConverter(),
    BinaryPlainPayloadConverter(),
    JSONProtoPayloadConverter(),
    BinaryProtoPayloadConverter(),
    JSONPlainPayloadConverter(),
)

The order in which the Payload Converters are applied is important. During serialization, the Data Converter tries the Payload Converters in that specific order until a Payload Converter returns a non-nil Payload. A custom PayloadConverter must implement the functions:
    from_payload() (for a single value) or
    from_payloads() (for a list of values) to convert to values from a Payload, and
    to_payload() (for a single value) or
    to_payloads() (for a list of values) to convert values to a Payload.



















